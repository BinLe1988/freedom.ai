'use client'

import { useState } from 'react'
import Link from 'next/link'

interface UserProfile {
  skills: string[]
  interests: string[]
  experience: string
  timeAvailable: number // hours per week
  riskTolerance: 'low' | 'medium' | 'high'
  investmentCapacity: number // in yuan
}

interface Opportunity {
  id: string
  title: string
  category: string
  description: string
  potentialIncome: {
    min: number
    max: number
    timeframe: string
  }
  requirements: {
    skills: string[]
    timeCommitment: number
    initialInvestment: number
  }
  riskLevel: number // 1-10
  marketTrend: 'rising' | 'stable' | 'declining'
  difficulty: 'easy' | 'medium' | 'hard'
  successRate: number // 0-100
  steps: string[]
  pros: string[]
  cons: string[]
  realExamples: string[]
}

export default function OpportunitiesPage() {
  const [profile, setProfile] = useState<UserProfile>({
    skills: [],
    interests: [],
    experience: 'beginner',
    timeAvailable: 10,
    riskTolerance: 'medium',
    investmentCapacity: 10000
  })
  
  const [opportunities, setOpportunities] = useState<Opportunity[]>([])
  const [showProfileForm, setShowProfileForm] = useState(true)
  const [analyzing, setAnalyzing] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState<string>('all')

  const skillOptions = [
    'ÁºñÁ®ãÂºÄÂèë', 'ËÆæËÆ°ÂàõÊÑè', 'ÂÜô‰ΩúÊñáÊ°à', 'Êï∞ÊçÆÂàÜÊûê', 'Â∏ÇÂú∫Ëê•ÈîÄ', 'ÈîÄÂîÆÊäÄÂ∑ß',
    'ËØ≠Ë®ÄÁøªËØë', 'ËßÜÈ¢ëÂà∂‰Ωú', 'ÊëÑÂΩ±ÊãçÁÖß', 'ÊïôÂ≠¶ÂüπËÆ≠', 'Âí®ËØ¢È°æÈóÆ', 'È°πÁõÆÁÆ°ÁêÜ',
    'Ë¥¢Âä°‰ºöËÆ°', 'Ê≥ïÂæãÊúçÂä°', 'ÂåªÁñóÂÅ•Â∫∑', 'ÊâãÂ∑•Âà∂‰Ωú', 'Èü≥‰πêËâ∫ÊúØ', 'ËøêÂä®ÂÅ•Ë∫´'
  ]

  const interestOptions = [
    'ÁßëÊäÄÂàõÊñ∞', 'ÈáëËûçÊäïËµÑ', 'ÁîµÂïÜÈõ∂ÂîÆ', 'ÂÜÖÂÆπÂàõ‰Ωú', 'ÊïôËÇ≤ÂüπËÆ≠', 'ÂÅ•Â∫∑ÂÖªÁîü',
    'ÊóÖÊ∏∏Âá∫Ë°å', 'ÁæéÈ£üÈ§êÈ•Æ', 'Êó∂Â∞öÊΩÆÊµÅ', 'ÂÆ∂Â±ÖÁîüÊ¥ª', 'ÂÆ†Áâ©ÊúçÂä°', 'ÁéØ‰øùÂÖ¨Áõä',
    'Ê∏∏ÊàèÂ®±‰πê', 'Á§æ‰∫§ÁΩëÁªú', 'ÊñáÂåñËâ∫ÊúØ', '‰ΩìËÇ≤ËøêÂä®', 'Ê±ΩËΩ¶‰∫§ÈÄö', 'Êàø‰∫ßÂª∫Á≠ë'
  ]

  const categories = [
    'all', 'Âú®Á∫ø‰∏öÂä°', 'Ëá™Áî±ËÅå‰∏ö', 'ÊäïËµÑÁêÜË¥¢', 'Âàõ‰∏öÈ°πÁõÆ', 'ÊäÄËÉΩÂèòÁé∞', 'ÂÜÖÂÆπÂàõ‰Ωú', 'ÊúçÂä°Âí®ËØ¢'
  ]

  const updateProfile = (field: keyof UserProfile, value: any) => {
    setProfile({ ...profile, [field]: value })
  }

  const toggleSkill = (skill: string) => {
    const newSkills = profile.skills.includes(skill)
      ? profile.skills.filter(s => s !== skill)
      : [...profile.skills, skill]
    updateProfile('skills', newSkills)
  }

  const toggleInterest = (interest: string) => {
    const newInterests = profile.interests.includes(interest)
      ? profile.interests.filter(i => i !== interest)
      : [...profile.interests, interest]
    updateProfile('interests', newInterests)
  }

  const discoverOpportunities = () => {
    if (profile.skills.length === 0 || profile.interests.length === 0) {
      alert('ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏ÄÈ°πÊäÄËÉΩÂíåÂÖ¥Ë∂£')
      return
    }

    setAnalyzing(true)
    setShowProfileForm(false)

    setTimeout(() => {
      const mockOpportunities: Opportunity[] = [
        {
          id: '1',
          title: 'Âú®Á∫øËØæÁ®ãÂà∂‰Ωú',
          category: 'ÂÜÖÂÆπÂàõ‰Ωú',
          description: 'Âü∫‰∫é‰Ω†ÁöÑ‰∏ì‰∏öÊäÄËÉΩÂà∂‰ΩúÂú®Á∫øÊïôÂ≠¶ËØæÁ®ãÔºåÈÄöËøáÁü•ËØÜ‰ªòË¥πÂπ≥Âè∞ÈîÄÂîÆ',
          potentialIncome: { min: 5000, max: 50000, timeframe: 'Êúà' },
          requirements: {
            skills: ['ÊïôÂ≠¶ÂüπËÆ≠', 'ËßÜÈ¢ëÂà∂‰Ωú'],
            timeCommitment: 15,
            initialInvestment: 3000
          },
          riskLevel: 3,
          marketTrend: 'rising',
          difficulty: 'medium',
          successRate: 70,
          steps: [
            'Á°ÆÂÆöËØæÁ®ã‰∏ªÈ¢òÂíåÁõÆÊ†áÂèó‰ºó',
            'Âà∂‰ΩúËØæÁ®ãÂ§ßÁ∫≤ÂíåÂÜÖÂÆπ',
            'ÂΩïÂà∂È´òË¥®ÈáèËßÜÈ¢ëËØæÁ®ã',
            'ÈÄâÊã©ÂêàÈÄÇÁöÑÈîÄÂîÆÂπ≥Âè∞',
            'Âà∂ÂÆöËê•ÈîÄÊé®ÂπøÁ≠ñÁï•',
            'ÊåÅÁª≠‰ºòÂåñÂíåÊõ¥Êñ∞ÂÜÖÂÆπ'
          ],
          pros: ['Ë¢´Âä®Êî∂ÂÖ•', 'ÂèØÊâ©Â±ïÊÄßÂº∫', 'Âª∫Á´ã‰∏™‰∫∫ÂìÅÁâå'],
          cons: ['ÂâçÊúüÊäïÂÖ•Â§ß', 'Á´û‰∫âÊøÄÁÉà', 'ÈúÄË¶ÅÊåÅÁª≠Êõ¥Êñ∞'],
          realExamples: ['ÊüêÁ®ãÂ∫èÂëòÂπ¥Êî∂ÂÖ•100‰∏á', 'ËÆæËÆ°Â∏àÊúàÂÖ•3‰∏á', 'Ëã±ËØ≠ËÄÅÂ∏àÂπ¥ÂÖ•50‰∏á']
        },
        {
          id: '2',
          title: 'Ëá™Áî±ËÅå‰∏öÊúçÂä°',
          category: 'Ëá™Áî±ËÅå‰∏ö',
          description: 'Âà©Áî®‰∏ì‰∏öÊäÄËÉΩ‰∏∫‰ºÅ‰∏öÂíå‰∏™‰∫∫Êèê‰æõÈ°πÁõÆÂà∂ÊúçÂä°',
          potentialIncome: { min: 3000, max: 30000, timeframe: 'Êúà' },
          requirements: {
            skills: ['ÁºñÁ®ãÂºÄÂèë', 'ËÆæËÆ°ÂàõÊÑè', 'ÂÜô‰ΩúÊñáÊ°à'],
            timeCommitment: 20,
            initialInvestment: 1000
          },
          riskLevel: 2,
          marketTrend: 'stable',
          difficulty: 'easy',
          successRate: 85,
          steps: [
            'ÂÆåÂñÑ‰∏™‰∫∫‰ΩúÂìÅÈõÜ',
            'Ê≥®ÂÜåËá™Áî±ËÅå‰∏öÂπ≥Âè∞',
            'ËÆæÂÆöÂêàÁêÜÁöÑÊúçÂä°‰ª∑Ê†º',
            'ÁßØÊûÅÊäïÊ†áÂíåÊ≤üÈÄö',
            'ÊåâÊó∂‰∫§‰ªòÈ´òË¥®Èáè‰ΩúÂìÅ',
            'Áª¥Êä§ÂÆ¢Êà∑ÂÖ≥Á≥ªÂíåÂè£Á¢ë'
          ],
          pros: ['Êó∂Èó¥ÁÅµÊ¥ª', 'ÊäÄËÉΩÊèêÂçá', 'Êî∂ÂÖ•Á®≥ÂÆö'],
          cons: ['Êî∂ÂÖ•Ê≥¢Âä®', 'ÈúÄË¶ÅËê•ÈîÄ', 'ÂÆ¢Êà∑ÁÆ°ÁêÜ'],
          realExamples: ['ËÆæËÆ°Â∏àÊúàÂÖ•2‰∏á', 'Á®ãÂ∫èÂëòÂπ¥ÂÖ•40‰∏á', 'ÊñáÊ°àÂ∏àÊúàÂÖ•1.5‰∏á']
        },
        {
          id: '3',
          title: 'ÁîµÂïÜÂ∫óÈì∫ËøêËê•',
          category: 'Âú®Á∫ø‰∏öÂä°',
          description: 'ÂºÄËÆæÁΩëÂ∫óÈîÄÂîÆ‰∫ßÂìÅÔºåÈÄöËøáÁîµÂïÜÂπ≥Âè∞ÂÆûÁé∞ÈîÄÂîÆÊî∂ÂÖ•',
          potentialIncome: { min: 2000, max: 100000, timeframe: 'Êúà' },
          requirements: {
            skills: ['Â∏ÇÂú∫Ëê•ÈîÄ', 'Êï∞ÊçÆÂàÜÊûê'],
            timeCommitment: 25,
            initialInvestment: 20000
          },
          riskLevel: 6,
          marketTrend: 'stable',
          difficulty: 'hard',
          successRate: 45,
          steps: [
            'Â∏ÇÂú∫Ë∞ÉÁ†îÂíå‰∫ßÂìÅÈÄâÊã©',
            'ÂØªÊâæÂèØÈù†ÁöÑ‰æõÂ∫îÂïÜ',
            'ÂºÄËÆæÂ∫óÈì∫Âíå‰∫ßÂìÅ‰∏äÊû∂',
            'Âà∂ÂÆöËê•ÈîÄÊé®ÂπøÁ≠ñÁï•',
            '‰ºòÂåñÂÆ¢Êà∑ÊúçÂä°‰ΩìÈ™å',
            'Êï∞ÊçÆÂàÜÊûêÂíåÊåÅÁª≠‰ºòÂåñ'
          ],
          pros: ['Êî∂ÂÖ•ÊΩúÂäõÂ§ß', 'ÂèØËßÑÊ®°Âåñ', 'Â∏ÇÂú∫ÂπøÈòî'],
          cons: ['Á´û‰∫âÊøÄÁÉà', 'ËµÑÈáëÈúÄÊ±ÇÂ§ß', 'Â∫ìÂ≠òÈ£éÈô©'],
          realExamples: ['ÊúçË£ÖÂ∫óÂπ¥ÂÖ•200‰∏á', 'Êï∞Á†Å‰∫ßÂìÅÊúàÂÖ•10‰∏á', 'ÁæéÂ¶ÜÂ∫óÂπ¥ÂÖ•80‰∏á']
        },
        {
          id: '4',
          title: 'ÊäïËµÑÁêÜË¥¢ÁªÑÂêà',
          category: 'ÊäïËµÑÁêÜË¥¢',
          description: 'ÈÄöËøáÂ§öÂÖÉÂåñÊäïËµÑÁªÑÂêàÂÆûÁé∞Ë¥¢ÂØåÂ¢ûÂÄº',
          potentialIncome: { min: 500, max: 20000, timeframe: 'Êúà' },
          requirements: {
            skills: ['Êï∞ÊçÆÂàÜÊûê', 'Ë¥¢Âä°‰ºöËÆ°'],
            timeCommitment: 5,
            initialInvestment: 50000
          },
          riskLevel: 5,
          marketTrend: 'rising',
          difficulty: 'medium',
          successRate: 60,
          steps: [
            'Â≠¶‰π†ÊäïËµÑÁêÜË¥¢Áü•ËØÜ',
            'ËØÑ‰º∞‰∏™‰∫∫È£éÈô©ÊâøÂèóËÉΩÂäõ',
            'Âà∂ÂÆöÊäïËµÑÁ≠ñÁï•ÂíåÁõÆÊ†á',
            'ÈÄâÊã©ÂêàÈÄÇÁöÑÊäïËµÑ‰∫ßÂìÅ',
            'ÂÆöÊúüÁõëÊéßÂíåË∞ÉÊï¥ÁªÑÂêà',
            'ÈïøÊúüÂùöÊåÅ‰ª∑ÂÄºÊäïËµÑ'
          ],
          pros: ['Ë¢´Âä®Êî∂ÂÖ•', 'Ë¥¢ÂØåÂ¢ûÂÄº', 'ÊäóÈÄöËÉÄ'],
          cons: ['Â∏ÇÂú∫È£éÈô©', 'ÈúÄË¶Å‰∏ì‰∏öÁü•ËØÜ', 'Êî∂ÁõäÊ≥¢Âä®'],
          realExamples: ['Âü∫ÈáëÊäïËµÑÂπ¥Âåñ15%', 'ËÇ°Á•®ÊäïËµÑÂπ¥ÂÖ•30‰∏á', 'ÂÄ∫Âà∏Á®≥ÂÆöÊî∂Áõä8%']
        },
        {
          id: '5',
          title: 'ÂÜÖÂÆπÂàõ‰ΩúÂèòÁé∞',
          category: 'ÂÜÖÂÆπÂàõ‰Ωú',
          description: 'ÈÄöËøáÁü≠ËßÜÈ¢ë„ÄÅÁõ¥Êí≠„ÄÅÂÜô‰ΩúÁ≠âÂÜÖÂÆπÂàõ‰ΩúËé∑ÂæóÊî∂ÂÖ•',
          potentialIncome: { min: 1000, max: 80000, timeframe: 'Êúà' },
          requirements: {
            skills: ['ÂÜô‰ΩúÊñáÊ°à', 'ËßÜÈ¢ëÂà∂‰Ωú', 'Â∏ÇÂú∫Ëê•ÈîÄ'],
            timeCommitment: 30,
            initialInvestment: 5000
          },
          riskLevel: 4,
          marketTrend: 'rising',
          difficulty: 'medium',
          successRate: 55,
          steps: [
            'Á°ÆÂÆöÂÜÖÂÆπÂÆö‰ΩçÂíåÈ£éÊ†º',
            'ÈÄâÊã©ÂêàÈÄÇÁöÑÂπ≥Âè∞Ê∏†ÈÅì',
            'Âà∂‰ΩúÈ´òË¥®ÈáèÂéüÂàõÂÜÖÂÆπ',
            'Âª∫Á´ãÁ≤â‰∏ùÁ§æÁæ§',
            'Êé¢Á¥¢Â§öÂÖÉÂåñÂèòÁé∞ÊñπÂºè',
            'ÊåÅÁª≠ÂàõÊñ∞Âíå‰ºòÂåñÂÜÖÂÆπ'
          ],
          pros: ['ÂàõÊÑèËá™Áî±', 'ÂΩ±ÂìçÂäõÂ§ß', 'Â§öÁßçÂèòÁé∞ÊñπÂºè'],
          cons: ['Á´û‰∫âÊøÄÁÉà', 'Êî∂ÂÖ•‰∏çÁ®≥ÂÆö', 'ÈúÄË¶ÅÊåÅÁª≠Âàõ‰Ωú'],
          realExamples: ['Áü•ËØÜÂçö‰∏ªÂπ¥ÂÖ•100‰∏á', 'ÁæéÈ£üUP‰∏ªÊúàÂÖ•5‰∏á', 'Ë¥¢Áªè‰ΩúËÄÖÂπ¥ÂÖ•60‰∏á']
        }
      ]

      // Ê†πÊçÆÁî®Êà∑ÁîªÂÉèÁ≠õÈÄâÂíåÊéíÂ∫èÊú∫‰ºö
      const filteredOpportunities = mockOpportunities.filter(opp => {
        const skillMatch = opp.requirements.skills.some(skill => profile.skills.includes(skill))
        const timeMatch = opp.requirements.timeCommitment <= profile.timeAvailable
        const investmentMatch = opp.requirements.initialInvestment <= profile.investmentCapacity
        const riskMatch = 
          (profile.riskTolerance === 'low' && opp.riskLevel <= 3) ||
          (profile.riskTolerance === 'medium' && opp.riskLevel <= 6) ||
          (profile.riskTolerance === 'high')
        
        return skillMatch && timeMatch && investmentMatch && riskMatch
      }).sort((a, b) => b.successRate - a.successRate)

      setOpportunities(filteredOpportunities)
      setAnalyzing(false)
    }, 3000)
  }

  const getRiskColor = (level: number) => {
    if (level <= 3) return 'text-green-400 bg-green-900/20'
    if (level <= 6) return 'text-yellow-400 bg-yellow-900/20'
    return 'text-red-400 bg-red-900/20'
  }

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'rising': return 'üìà'
      case 'stable': return '‚û°Ô∏è'
      case 'declining': return 'üìâ'
      default: return '‚û°Ô∏è'
    }
  }

  const filteredOpportunities = selectedCategory === 'all' 
    ? opportunities 
    : opportunities.filter(opp => opp.category === selectedCategory)

  return (
    <div className="min-h-screen bg-gray-900">
      {/* ÂØºËà™Ê†è */}
      <nav className="fixed top-0 left-0 right-0 z-50 bg-gray-900/95 backdrop-blur-sm border-b border-gray-800">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            <Link href="/" className="flex items-center space-x-2">
              <span className="text-2xl">üîç</span>
              <span className="text-2xl font-bold text-white">Freedom.AI</span>
            </Link>
            <Link href="/" className="text-gray-300 hover:text-blue-400 transition-colors">
              ‚Üê ËøîÂõûÈ¶ñÈ°µ
            </Link>
          </div>
        </div>
      </nav>
      
      <div className="container mx-auto px-4 pt-24 pb-12">
        {/* È°µÈù¢Ê†áÈ¢ò */}
        <div className="text-center mb-12">
          <div className="text-6xl mb-4">üîç</div>
          <h1 className="text-4xl font-bold text-white mb-4">Êú∫‰ºöÊé¢Á¥¢AI</h1>
          <p className="text-xl text-gray-300 max-w-2xl mx-auto">
            ÂèëÁé∞Â∏ÇÂú∫Êú∫‰ºöÔºåÂàõÈÄ†Êî∂ÂÖ•Êù•Ê∫êÔºåÂºÄÂêØÂ§öÂÖÉÂåñÁöÑË¥¢Âä°Ëá™Áî±‰πãË∑Ø
          </p>
        </div>

        {/* Áî®Êà∑ÁîªÂÉèË°®Âçï */}
        {showProfileForm && (
          <div className="max-w-4xl mx-auto mb-8">
            <div className="bg-white/5 backdrop-blur-sm rounded-lg border border-gray-700 p-6">
              <h2 className="text-2xl font-bold text-white mb-6">üìã ‰∏™‰∫∫ÁîªÂÉèÂàÜÊûê</h2>
              
              <div className="space-y-6">
                {/* ÊäÄËÉΩÈÄâÊã© */}
                <div>
                  <label className="text-lg font-semibold text-blue-400 mb-3 block">‰Ω†ÁöÑÊäÄËÉΩ (ÈÄâÊã©3-5È°π)</label>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    {skillOptions.map(skill => (
                      <button
                        key={skill}
                        onClick={() => toggleSkill(skill)}
                        className={`px-3 py-2 rounded-lg text-sm transition-colors ${
                          profile.skills.includes(skill)
                            ? 'bg-blue-600 text-white'
                            : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                        }`}
                      >
                        {skill}
                      </button>
                    ))}
                  </div>
                </div>

                {/* ÂÖ¥Ë∂£ÈÄâÊã© */}
                <div>
                  <label className="text-lg font-semibold text-green-400 mb-3 block">ÂÖ¥Ë∂£È¢ÜÂüü (ÈÄâÊã©2-4È°π)</label>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    {interestOptions.map(interest => (
                      <button
                        key={interest}
                        onClick={() => toggleInterest(interest)}
                        className={`px-3 py-2 rounded-lg text-sm transition-colors ${
                          profile.interests.includes(interest)
                            ? 'bg-green-600 text-white'
                            : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                        }`}
                      >
                        {interest}
                      </button>
                    ))}
                  </div>
                </div>

                {/* ÂÖ∂‰ªñÂèÇÊï∞ */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  <div>
                    <label className="text-gray-300 text-sm mb-2 block">ÁªèÈ™åÊ∞¥Âπ≥</label>
                    <select
                      value={profile.experience}
                      onChange={(e) => updateProfile('experience', e.target.value)}
                      className="w-full bg-gray-800 text-white rounded-lg px-3 py-2"
                    >
                      <option value="beginner">ÂàùÂ≠¶ËÄÖ</option>
                      <option value="intermediate">ÊúâÁªèÈ™å</option>
                      <option value="expert">‰∏ìÂÆ∂Á∫ß</option>
                    </select>
                  </div>

                  <div>
                    <label className="text-gray-300 text-sm mb-2 block">ÊØèÂë®ÂèØÊäïÂÖ•Êó∂Èó¥: {profile.timeAvailable}Â∞èÊó∂</label>
                    <input
                      type="range"
                      min="5"
                      max="40"
                      value={profile.timeAvailable}
                      onChange={(e) => updateProfile('timeAvailable', Number(e.target.value))}
                      className="w-full"
                    />
                  </div>

                  <div>
                    <label className="text-gray-300 text-sm mb-2 block">È£éÈô©ÊâøÂèóËÉΩÂäõ</label>
                    <select
                      value={profile.riskTolerance}
                      onChange={(e) => updateProfile('riskTolerance', e.target.value)}
                      className="w-full bg-gray-800 text-white rounded-lg px-3 py-2"
                    >
                      <option value="low">‰øùÂÆàÂûã</option>
                      <option value="medium">Âπ≥Ë°°Âûã</option>
                      <option value="high">ÊøÄËøõÂûã</option>
                    </select>
                  </div>

                  <div>
                    <label className="text-gray-300 text-sm mb-2 block">ÂàùÂßãÊäïËµÑËÉΩÂäõ: ¬•{profile.investmentCapacity.toLocaleString()}</label>
                    <input
                      type="range"
                      min="1000"
                      max="100000"
                      step="1000"
                      value={profile.investmentCapacity}
                      onChange={(e) => updateProfile('investmentCapacity', Number(e.target.value))}
                      className="w-full"
                    />
                  </div>
                </div>

                <button
                  onClick={discoverOpportunities}
                  disabled={analyzing}
                  className="w-full bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white py-3 rounded-lg text-lg font-semibold transition-colors"
                >
                  {analyzing ? 'üîÑ AIÂàÜÊûê‰∏≠...' : 'üîç ÂèëÁé∞Êú∫‰ºö'}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Êú∫‰ºöÂàóË°® */}
        {opportunities.length > 0 && (
          <div>
            {/* ÂàÜÁ±ªÁ≠õÈÄâ */}
            <div className="flex flex-wrap gap-2 mb-6 justify-center">
              {categories.map(category => (
                <button
                  key={category}
                  onClick={() => setSelectedCategory(category)}
                  className={`px-4 py-2 rounded-lg text-sm transition-colors ${
                    selectedCategory === category
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                  }`}
                >
                  {category === 'all' ? 'ÂÖ®ÈÉ®' : category}
                </button>
              ))}
            </div>

            {/* ÁªüËÆ°‰ø°ÊÅØ */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-6 text-center">
                <div className="text-3xl font-bold text-blue-400">{filteredOpportunities.length}</div>
                <div className="text-gray-300">ÂåπÈÖçÊú∫‰ºö</div>
              </div>
              <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-6 text-center">
                <div className="text-3xl font-bold text-green-400">
                  ¬•{Math.max(...filteredOpportunities.map(o => o.potentialIncome.max)).toLocaleString()}
                </div>
                <div className="text-gray-300">ÊúÄÈ´òÊúàÊî∂ÂÖ•</div>
              </div>
              <div className="bg-purple-900/20 border border-purple-500/30 rounded-lg p-6 text-center">
                <div className="text-3xl font-bold text-purple-400">
                  {Math.round(filteredOpportunities.reduce((sum, o) => sum + o.successRate, 0) / filteredOpportunities.length)}%
                </div>
                <div className="text-gray-300">Âπ≥ÂùáÊàêÂäüÁéá</div>
              </div>
            </div>

            {/* Êú∫‰ºöÂç°Áâá */}
            <div className="grid lg:grid-cols-2 gap-6">
              {filteredOpportunities.map(opportunity => (
                <div key={opportunity.id} className="bg-white/5 backdrop-blur-sm rounded-lg border border-gray-700 p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <h3 className="text-xl font-bold text-white mb-2">{opportunity.title}</h3>
                      <p className="text-blue-400 text-sm">{opportunity.category}</p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-xl">{getTrendIcon(opportunity.marketTrend)}</span>
                      <span className={`px-2 py-1 rounded text-xs ${getRiskColor(opportunity.riskLevel)}`}>
                        È£éÈô©{opportunity.riskLevel}/10
                      </span>
                    </div>
                  </div>

                  <p className="text-gray-300 text-sm mb-4">{opportunity.description}</p>

                  {/* Êî∂ÂÖ•ÊΩúÂäõ */}
                  <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-3 mb-4">
                    <div className="flex items-center justify-between">
                      <span className="text-green-400 font-semibold">Êî∂ÂÖ•ÊΩúÂäõ</span>
                      <span className="text-white font-bold">
                        ¬•{opportunity.potentialIncome.min.toLocaleString()} - ¬•{opportunity.potentialIncome.max.toLocaleString()}/{opportunity.potentialIncome.timeframe}
                      </span>
                    </div>
                    <div className="flex items-center justify-between mt-2 text-sm">
                      <span className="text-gray-300">ÊàêÂäüÁéá</span>
                      <span className="text-green-400">{opportunity.successRate}%</span>
                    </div>
                  </div>

                  {/* Ë¶ÅÊ±Ç */}
                  <div className="mb-4">
                    <h4 className="text-gray-300 font-semibold mb-2">üìã Âü∫Êú¨Ë¶ÅÊ±Ç</h4>
                    <div className="grid grid-cols-1 gap-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-400">Êó∂Èó¥ÊäïÂÖ•:</span>
                        <span className="text-white">{opportunity.requirements.timeCommitment}Â∞èÊó∂/Âë®</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">ÂàùÂßãÊäïËµÑ:</span>
                        <span className="text-white">¬•{opportunity.requirements.initialInvestment.toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">ÈöæÂ∫¶Á≠âÁ∫ß:</span>
                        <span className={`${
                          opportunity.difficulty === 'easy' ? 'text-green-400' :
                          opportunity.difficulty === 'medium' ? 'text-yellow-400' : 'text-red-400'
                        }`}>
                          {opportunity.difficulty === 'easy' ? 'ÁÆÄÂçï' :
                           opportunity.difficulty === 'medium' ? '‰∏≠Á≠â' : 'Âõ∞Èöæ'}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* ÊâÄÈúÄÊäÄËÉΩ */}
                  <div className="mb-4">
                    <h4 className="text-gray-300 font-semibold mb-2">üõ†Ô∏è ÊâÄÈúÄÊäÄËÉΩ</h4>
                    <div className="flex flex-wrap gap-2">
                      {opportunity.requirements.skills.map(skill => (
                        <span key={skill} className="bg-blue-900/30 text-blue-300 px-2 py-1 rounded text-xs">
                          {skill}
                        </span>
                      ))}
                    </div>
                  </div>

                  {/* ‰ºòÁº∫ÁÇπ */}
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <h4 className="text-green-400 font-semibold mb-2 text-sm">‚úÖ ‰ºòÂäø</h4>
                      <ul className="text-xs text-gray-300 space-y-1">
                        {opportunity.pros.map((pro, index) => (
                          <li key={index}>‚Ä¢ {pro}</li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="text-red-400 font-semibold mb-2 text-sm">‚ö†Ô∏è ÊåëÊàò</h4>
                      <ul className="text-xs text-gray-300 space-y-1">
                        {opportunity.cons.map((con, index) => (
                          <li key={index}>‚Ä¢ {con}</li>
                        ))}
                      </ul>
                    </div>
                  </div>

                  {/* ÊàêÂäüÊ°à‰æã */}
                  <div className="bg-purple-900/20 border border-purple-500/30 rounded-lg p-3">
                    <h4 className="text-purple-400 font-semibold mb-2 text-sm">üèÜ ÊàêÂäüÊ°à‰æã</h4>
                    <div className="text-xs text-gray-300 space-y-1">
                      {opportunity.realExamples.map((example, index) => (
                        <div key={index}>‚Ä¢ {example}</div>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {filteredOpportunities.length === 0 && (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">üîç</div>
                <h3 className="text-xl font-semibold text-gray-400 mb-2">ÊöÇÊó†ÂåπÈÖçÊú∫‰ºö</h3>
                <p className="text-gray-500">Â∞ùËØïË∞ÉÊï¥Á≠õÈÄâÊù°‰ª∂Êàñ‰∏™‰∫∫ÁîªÂÉèËÆæÁΩÆ</p>
              </div>
            )}
          </div>
        )}

        {!showProfileForm && opportunities.length === 0 && !analyzing && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üòî</div>
            <h3 className="text-xl font-semibold text-gray-400 mb-2">Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÊú∫‰ºö</h3>
            <p className="text-gray-500 mb-4">Ê†πÊçÆ‰Ω†ÁöÑÊù°‰ª∂ÔºåÊöÇÊó∂Ê≤°ÊúâÊâæÂà∞ÂêàÈÄÇÁöÑÊú∫‰ºö</p>
            <button
              onClick={() => setShowProfileForm(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors"
            >
              ÈáçÊñ∞ËÆæÁΩÆÊù°‰ª∂
            </button>
          </div>
        )}
      </div>
    </div>
  )
}
